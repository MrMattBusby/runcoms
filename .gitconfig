# .gitconfig
# Copyright (c) 2021 Matt Busby @MrMattBusby
# MIT License (https://github.com/MrMattBusby/runcoms/blob/master/LICENSE)

# Place in your ~/.gitconfig:
# [include]
#	path         = C:/path/to/this/.gitconfig

[user]
	name         = Matt Busby
[core]
	#autocrlf     = true  # Windows
	#filemode     = false  # Windows
	longpaths    = true
	fscache      = true
[help]
	format       = html
[color]
	diff         = auto
	status       = auto
	branch       = auto
	interactive  = true
[alias]
	# CONFIG
	alias        = "!f() { git config --get-regexp ^alias.\"$1\"; }; f"  # [aliasName]
	cfg          = config -l                                             # .
	cfgg         = config --global -l                                    # .
	cfgl         = config --local -l                                     # .
	edit-cfg     = !vim ~/.gitconfig $(git config include.path)          # .
	ignore-list  = !git ls-files -v | grep -e '^[a-z]'                   # .
	ignore-local = update-index --assume-unchanged                       # {file}
	fetch-all    = !git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git fetch origin  # . reconfigured config to fetch all remote refs
	fetch-one    = "!f() { git remote set-branches --add origin \"$1\" && git fetch origin && git switch \"$1\"; }; f"  # {branch} readd one branch after doing single-branch
	unignore-local = update-index ---no assume-unchanged                 # {file}
	
	# SIMPLE SHORTCUTS
	a            = !git alias                                            # [...]
	b            = branch                                                # [...]
	c            = commit -vm                                            # {commitMessage} {files...}
	ci           = commit -vm                                            # {commitMessage} {files...}
	cl           = clone                                                 # {...}
	cleanup      = clean -df                                             # . remove all unversioned files
	co           = checkout                                              # {...}
	cp           = cherry-pick                                           # {...}
	d            = diff                                                  # [...]
	dc           = diff --cached                                         # [...]
	dh           = diff HEAD                                             # .
	diff-less    = !git diff | less                                      # .
	dl           = diff HEAD^ HEAD                                       # .
	dt           = difftool                                              # {...}
	f            = fetch                                                 # {...}
	fa           = fetch --all                                           # {...}
	lost         = fsck --lost-found                                     # .
	m            = merge                                                 # {...}
	ma           = merge --abort                                         # .
	mb           = merge-base                                            # {branch-1} {branch-2}
	mc           = merge --continue                                      # .
	mt           = mergetool                                             # {...}
	peek         = "!f() { git show \"$1\":\"$2\"; }; f"                 # {branch} {file}
	pl           = pull                                                  # [...] fetch + merge 
	plr          = pull --rebase                                         # .
	plra         = pull --rebase --autostash                             # .
	r            = rebase                                                # {...}
	ra           = rebase --autostash                                    # {...}
	rb           = rebase                                                # {...}
	rba          = rebase --abort                                        # .
	rbc          = rebase --continue                                     # .
	rbs          = rebase --skip                                         # .
	squash       = rebase -i                                             # .
	s            = status -sb                                            # .
	st           = status -sb                                            # .
	sw           = switch                                                # {...}
	swc          = switch -c                                             # {newBranchName}
	
	# REFS/BRANCHES
	ba           = branch -avv                                           # .
	bl           = branch -lvv                                           # .
	bn           = switch -c                                             # [...] Branch-new. Doesn't set upstream
	br           = branch -rvv                                           # .
	branchname   = branch --show-current                                 # .
	bv           = !git remote show $(git remote show)                   # . most verbose
	del          = branch --delete                                       # {branch}
	delf         = branch --delete --force                               # {branch}
	get          = !git fetch && git switch                              # {branch} get an existing branch 
	hash         = show-ref --head --heads --hash --verify HEAD          # .
	head         = "!f() { cat .git/HEAD 2> /dev/null || cat ../.git/HEAD 2> /dev/null ; git show-ref -d --head --abbrev HEAD ; git log HEAD -n 1 --oneline; }; f"  # .
	heads        = show-ref -d --head --heads                            # .
	info         = "!f() { echo === config ===; git version; git config user.name; git config user.email; git branch --show-current; git remote -v; git show-ref -d --heads --head --abbrev HEAD; git config --get-all remote.origin.url; git config --get-all remote.origin.fetch; echo === branches ===; git branch -lvv; echo === show ===; git log -n 1 --oneline --decorate; echo === stat ===; git status -sb; echo === stash ===; git stash list; }; f"  # [...]
	prune        = fetch --all --prune                                   # . delete local branches after they've been remotely deleted
	refname      = rev-parse --abbrev-ref                                # {ref}
	refs         = show-ref -d --head                                    # . local refs
	refsr        = ls-remote                                             # . remote refs (e.g. if you've done a single-branch and need to see everything available)
	retag        = tag -fa                                               # {tag}
	#retag        = "!f() { if git show-ref -d --tags | sed 's/.*\/\(.*$\)/\1/' | grep -qw \"$1\" ; then git tag -fa \"$1\" ; else echo error: tag \'\"$1\"\' not found. ; fi ; }; f"  # {tag}
	tags         = show-ref -d --tags                                    # [...]
	
	# INDEX/ETC
	amend        = commit --amend                                        # {...}
	incoming-diff= !git fetch && git diff HEAD FETCH_HEAD                # .
	incoming-log = !git fetch && git whatchanged HEAD..FETCH_HEAD        # .
	#incoming     = "!f() { git fetch origin \"$1\" && git diff HEAD..origin/\"$1\"; }; f"  # {branch}
	into         = !git fetch && git merge                               # {branch}
	merge-dryrun = !git merge --no-commit --no-ff                        # {branch}
	merge-ours   = checkout --ours --                                    # {files}
	merge-theirs = checkout --theirs --                                  # {files}
	onto         = !git fetch && git rebase                              # {branch}
	readd        = add -u --                                             # {files}
	wipe         = restore --source=HEAD --staged --worktree --          # {files} reset --hard HEAD --
	save         = commit -am 'Save point'                               # .
	shallow      = clone --single-branch --depth 50 -b                   # {branch}
	uncommit     = reset --soft HEAD~1 --                                # {files}
	unshallow    = fetch --unshallow                                     # .
	unstage      = restore --source=HEAD --staged --                     # {files} reset --mixed HEAD --
	
	# PUSHES
	dela          = "!f() { git branch -d \"$1\" && git push origin --delete \"$1\"; }; f"  # {branch} delete all
	delr          = push origin --delete                                 # {branch}
	done          = push origin HEAD                                     # .
	leeroyjenkins = !git commit -am 'Save point' && git push origin HEAD # .
	new           = "!f() { git switch -c \"$1\" && git push -u origin \"$1\"; }; f"  # {branch}
	set-upstream  = !git branch --set-upstream-to="origin/$(git branch --show-current)" || git push -u origin "$(git branch --show-current)" # .
	tagout        = "!f() { git tag -a \"$1\" -m \"$2\" && git push origin \"$1\"; }; f"  # {tag} {message}
	
	# STASHES
	sh           = stash                                                 # [...]
	sha          = stash apply                                           # .
	shl          = stash list                                            # .
	shp          = stash pop                                             # .
	shs          = stash save                                            # {savename}
	
	# HISTORY
	l            = log --oneline                                         # [...]
	la           = log              --pretty=format:'%C(yellow)%h%Creset %Cgreen(%cd) %C(bold blue)<%an>%C(red)%d%Creset %s' --date=short  # [...]
	last         = log -n 1                                              # .
	lf           = log --follow -p --                                    # {file} log of a file
	lg           = log --graph      --pretty=format:'%C(yellow)%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%C(red)%d%Creset'  # [...]
	ll           = log origin..HEAD --pretty=format:'%C(yellow)%h%Creset %Cgreen(%cr) %C(bold blue)<%an>%C(red)%d%Creset %s'  # [...]
	recent       = log -n 5 --stat                                       # .
	
	# FILES
	dump         = cat-file -p                                           # {blob}
	type         = cat-file -t                                           # {blob}
	
	# OTHER
	each         = "!f() { for each in $(find . -type d -name .git) ; do pushd \"${each}/..\" &> /dev/null; if [ \"$1\" = \"-f\" ] ; then shift; git fetch &> /dev/null ; fi ; echo \"==================== $(basename $(git config --local remote.origin.url) | sed 's/\\.git$//' ) ====================\"; echo \">>> $(pwd -P)\"; echo \">>> $(git config --local remote.origin.url) (branches: $(git branch -l | wc -l), ahead: $(git branch -lvv | egrep ':\\s*ahead'|wc -l))\"; echo \">>> $(git status -sb | head -1 | sed 's/^#*\\s*//') (changes: $(git status -s -uno | wc -l))\"; echo \">>> $(git log -n 1 --oneline --decorate)\"; if [[ \"$#\" -ne 0 ]] ; then echo \">>> Running \"$*\"...\"; sh -c \"$*\"; fi; popd &> /dev/null; echo; done; }; f" # [...] Run command on each repository under . If '-f' is first argument, fetch will first be run.
	
	# VISUAL
	vis          = !gitk &                                               # .
