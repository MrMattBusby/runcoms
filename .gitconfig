# How to use:
# [include]
#	path         = C:/path/to/this/.gitconfig
[user]
	name         = Matt Busby
[core]
	autocrlf     = true
	longpaths    = true
	symlinks     = false
	fscache      = true
[help]
	format       = html
[color]
	diff         = auto
	status       = auto
	branch       = auto
	interactive  = true
[alias]
	# CONFIG
	alias        = "!f() { git config --get-regexp ^alias.\"$1\"; }; f"  # [aliasName]
	cfg          = config -l                                             # .
	cfgg         = config --global -l                                    # .
	cfgl         = config --local -l                                     # .
	ignore-local = update-index --assume-unchanged                       # {file}
	fetch-all    = !git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git fetch origin  # . reconfigured config to fetch all remote refs
	fetch-one    = "!f() { git remote set-branches --add origin \"$1\" && git fetch origin && git switch \"$1\"; }; f"  # {branch} readd one branch after doing single-branch
	
	# SIMPLE SHORTCUTS
	br           = branch                                                # [...]
	ci           = commit -v                                             # {files}
	cleanup      = clean -df                                             # . remove all unversioned files
	cm           = commit -m                                             # {commitMessage}
	co           = checkout                                              # {...}
	d            = diff                                                  # [...]
	dc           = diff --cached                                         # [...]
	dl           = diff HEAD^ HEAD                                       # .
	diff-less    = !git diff | less                                      # .
	dt           = difftool                                              # {...}
	lost         = fsck --lost-found                                     # .
	mt           = mergetool                                             # {...}
	peek         = "!f() { git show \"$1\":\"$2\"; }; f"                 # {branch} {file}
	plm          = pull                                                  # [...]
	plr          = pull --rebase                                         # .
	rb           = rebase                                                # {...}
	rba          = rebase --abort                                        # .
	rbc          = rebase --continue                                     # .
	rbc          = rebase --skip                                         # .
	squash       = rebase -i                                             # .
	st           = status -sb                                            # .
	sw           = switch                                                # {...}
	swc          = switch -c                                             # {newBranchName}
	
	# REFS/BRANCHES
	bra          = branch -avv                                           # .
	brl          = branch -lvv                                           # .
	branch-name  = rev-parse --abbrev-ref HEAD                           # . get branch name
	brr          = branch -rvv                                           # .
	brv          = !git remote show $(git remote show)                   # . most verbose
	del          = branch --delete                                       # {branch}
	delf         = branch --delete --force                               # {branch}
	get          = !git fetch && git switch                              # {branch} get an existing branch 
	head         = !cat .git/HEAD; git show-ref -d --head HEAD; git log HEAD -n 1 --oneline  # .
	prune        = fetch --all --prune                                   # . delete local branches after they've been remotely deleted
	refs         = show-ref -d --head                                    # . local refs
	refsr        = ls-remote                                             # . remote refs (e.g. if you've done a single-branch and need to see everything available)
	
	# INDEX/ETC
	amend        = commit --amend                                        # {...}
	incoming     = !git fetch  && git diff HEAD FETCH_HEAD               # .
	incoming2    = "!f() { git fetch origin \"$1\" && git diff HEAD..origin/\"$1\"; }; f"  # {branch}
	into         = !git fetch && git merge                               # {branch}
	merge-ours   = checkout --ours --                                    # {files}
	merge-theirs = checkout --theirs --                                  # {files}
	onto         = !git fetch && git rebase                              # {branch}
	readd        = add -u --                                             # {files}
	wipe         = restore --source=HEAD --staged --worktree --          # {files} reset --hard HEAD --
	save         = commit -am 'Save point'                               # .
	shallow      = clone --single-branch --depth 50 -b                   # {branch}
	uncommit     = reset --soft HEAD~1 --                                # {files}
	unstage      = restore --source=HEAD --staged --                     # {files} reset --mixed HEAD --
	
	# PUSHES
	dela         = "!f() { git branch -d \"$1\" && git push origin --delete \"$1\"; }; f"  # {branch} delete all
	delr         = push origin --delete                                  # {branch}
	done         = push origin HEAD                                      # .
	new          = "!f() { git switch -c \"$1\" && git push -u origin \"$1\"; }; f"  # {branch}
	tg           = "!f() { git tag -a \"$1\" -m \"$2\" && git push origin \"$1\"; }; f"  # {tag} {message}
	
	# STASHES
	sh           = stash                                                 # [...]
	sha          = stash apply                                           # .
	shl          = stash list                                            # .
	shp          = stash pop                                             # .
	shs          = stash save                                            # .
	
	# HISTORY
	info         = show --stat                                           # [...]
	l            = log --oneline                                         # [...]
	la           = log --pretty=format:'%C(yellow)%h%Creset %Cgreen(%ad) %C(bold blue)<%an>%Creset %s' --date=short  # [...]
	last         = log -n 1 --stat                                       # .
	lf           = log --follow -p --                                    # {file} log of a file
	lg           = log --graph --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative  # [...]
	ll           = log origin..HEAD --pretty=format:'%C(yellow)%h%Creset %Cgreen(%ad) %C(bold blue)<%an>%Creset %s' --date=short  # [...]
	recent       = log -n 3 --stat                                       # .
	
	# FILES
	dump         = cat-file -p                                           # {blob}
	type         = cat-file -t                                           # {blob}
	
	# VISUAL
	vis          = !gitk &                                               # .
