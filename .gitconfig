# How to use:
# [include]
#	path        = /path/to/.gitconfig

[user]
	name        = Matt Busby
	
[alias]
	# CONFIG
	cfg         = config -l
	cfgg        = config --global -l
	cfgl        = config --local -l
	alias       = config --get-regexp ^alias
	fetchall    = !git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git fetch origin
	fetchone    = "!f() { git remote set-branches --add origin \"$1\" && git fetch origin && git switch \"$1\; }; f"
	
	# SIMPLE SHORTCUTS
	st          = status -sb
	br          = branch
	ci          = commit -v
	cm          = commit -m
	co          = checkout
	cls         = clear -df
	df          = diff
	dc          = diff --cached
	pr          = pull --rebase
	pl          = pull
	ps          = push origin
	rb          = rebase
	rbc         = rebase --continue
	rba         = rebase --abort
	squash      = rebase -i
	sw          = switch
	swc         = switch -c
	
	# REFS/BRANCHES
	del         = branch -d
	delete      = branch -D
	get         = !git fetch origin && git switch 
	bra         = branch -avv
	brr         = branch -rv
	brl         = branch -lv
	brv         = remote show origin # most verbose
	refsl       = show-ref -d # local refs
	refsr       = ls-remote # remote refs
	
	# INDEX
	unstage     = reset --mixed HEAD --
	save        = commit -am 'Save point'
	done        = push origin HEAD
	amend       = commit --amend
	uncommit    = reset --soft HEAD~1 --
	res         = reset --hard HEAD --
	readd       = add -u
	onto        = !git fetch origin && git rebase
	shallow     = clone --single-branch --depth 50 -b 
	
	# PUSHES
	new         = "!f() { git switch -c \"$1\" && git push -u origin \"$1\"; }; f"
	tg          = "!f() { git tag -a \"$1\" -m \"$2\" && git push origin \"$1\"; }; f"
	
	# STASHES
	sh          = stash
	shl         = stash list
	shp         = stash pop
	sha         = stash apply
	shs         = stash save
	
	# HISTORY
	l           = log --oneline
	ll          = log --pretty=format:'%C(yellow)%h%Creset %Cgreen(%ad) %C(bold blue)<%an>%Creset %s' --date=short
	lg          = log --graph --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lf          = log --follow -p -- # log of a file
	last        = log -3 HEAD
	hist        = log origin..HEAD --decorate # history of current branch since breaking off from parent
	
	# FILES
	type        = cat-file -t
	dump        = cat-file -p
	
	# VISUALS
	vis         = !gitk
